{"version":3,"sources":["CommentInput.js","Comment.js","Post.js","PostInput.js","App.js","index.js"],"names":["CommentInput","postID","useState","postid","text","author","comment","setComment","className","placeholder","onChange","e","target","value","type","onClick","firebase","firestore","collection","add","defaultProps","Comment","Post","title","body","date","docID","comments","setComments","useEffect","where","get","then","querySnapshot","docs","map","doc","data","onSnapshot","PostInput","post","setPost","loaded","useRef","current","currentDate","Date","toLocaleDateString","addDate","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","posts","setPosts","orderBy","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAKe,SAASA,EAAT,GAAmC,IAAXC,EAAU,EAAVA,OAAU,EACjBC,mBAAS,CACrCC,OAAQ,GACRC,KAAM,GACNC,OAAQ,KAJqC,mBACxCC,EADwC,KAC/BC,EAD+B,KAW/C,OACE,sBAAKC,UAAU,wBAAf,UACE,kDACA,uBAAOC,YAAY,OAAOC,SAAU,SAACC,GAAD,OAAOJ,EAAW,2BAAKD,GAAN,IAAeF,KAAMO,EAAEC,OAAOC,MAAOV,OAAQF,QAClG,uBAAOQ,YAAY,SAASC,SAAU,SAACC,GAAD,OAAOJ,EAAW,2BAAKD,GAAN,IAAeD,OAAQM,EAAEC,OAAOC,MAAOV,OAAQF,QACtG,wBACEa,KAAK,SACLC,QAAS,WAVbC,IAASC,YAAYC,WAAW,YAAYC,IAAIb,IAQ9C,uBAWNN,EAAaoB,aAAe,CAC1BnB,OAAQ,I,MC7BK,SAASoB,EAAT,GAEX,IADFjB,EACC,EADDA,KAAMC,EACL,EADKA,OAEN,OACE,gCACE,qBAAKG,UAAU,OAAf,SAAuBJ,IACvB,8BAAMC,OCHG,SAASiB,EAAT,GAEX,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMnB,EACZ,EADYA,OAAQoB,EACpB,EADoBA,KAAMC,EAC1B,EAD0BA,MAC1B,EAC+BxB,mBAAS,IADxC,mBACMyB,EADN,KACgBC,EADhB,KAcD,OAXAC,qBAAU,WACRb,IAASC,YAAYC,WAAW,YAAYY,MAAM,SAAU,KAAM,CAAEJ,UAASK,MAC1EC,MAAK,SAACC,GACLL,EAAYK,EAAcC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,cAGpDrB,IAASC,YAAYC,WAAW,YAAYoB,YAAW,SAACL,GACtDL,EAAYK,EAAcC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,gBAEjD,IAGD,sBAAK7B,UAAU,gBAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBe,IACxB,8BAAMC,IACN,8BAAMnB,IACN,8BAAMoB,IAEN,cAAC,EAAD,CAAcxB,OAAQyB,IACtB,qBAAKlB,UAAU,mBAAf,SACGmB,EAASQ,KAAI,SAAC7B,GAAD,OACZ,cAAC,EAAD,CACED,OAAM,kBAAaC,EAAQD,QAC3BD,KAAME,EAAQF,eDpB1BiB,EAAQD,aAAe,CACrBf,OAAQ,GACRD,KAAM,IC0BRkB,EAAKF,aAAe,CAClBG,MAAO,GACPC,KAAM,GACNnB,OAAQ,GACRoB,KAAM,GACNC,MAAO,I,MC5CM,SAASa,IAAa,IAAD,EACVrC,mBAAS,CAC/BqB,MAAO,GACPC,KAAM,GACNnB,OAAQ,GACRoB,KAAM,KAL0B,mBAC3Be,EAD2B,KACrBC,EADqB,KAS5BC,EAASC,kBAAO,GAiBtB,OAhBAd,qBAAU,WACJa,EAAOE,QACT5B,IAASC,YAAYC,WAAW,SAASC,IAAIqB,GAE7CE,EAAOE,SAAU,IAElB,CAACJ,EAAKf,OAWP,sBAAKjB,UAAU,qBAAf,UACE,+CACA,uBAAOC,YAAY,QAAQC,SAAU,SAACC,GAAD,OAAO8B,EAAQ,2BAAKD,GAAN,IAAYjB,MAAOZ,EAAEC,OAAOC,YAC/E,uBAAOJ,YAAY,OAAOC,SAAU,SAACC,GAAD,OAAO8B,EAAQ,2BAAKD,GAAN,IAAYhB,KAAMb,EAAEC,OAAOC,YAC7E,uBAAOJ,YAAY,SAASC,SAAU,SAACC,GAAD,OAAO8B,EAAQ,2BAAKD,GAAN,IAAYnC,OAAQM,EAAEC,OAAOC,YACjF,wBACEC,KAAK,SACLC,QAAS,kBAhBf,WACE,IAAM8B,GAAc,IAAIC,MAAOC,qBAC/BN,GAAQ,8BAAC,eACJD,GADG,IAENf,KAAMoB,OAYWG,IAFjB,uB,MCnBDhC,IAASiC,KAAKC,QACjBlC,IAASmC,cAXY,CACrBC,OAAQC,0CACRC,WAAYD,mCACZE,YAAaF,0CACbG,UAAWH,mBACXI,cAAeJ,+BACfK,kBAAmBL,cACnBM,MAAON,6CAqCMO,MA9Bf,WAAgB,IAAD,EACa1D,mBAAS,IADtB,mBACN2D,EADM,KACCC,EADD,KAcb,OAXAjC,qBAAU,WACRb,IAASC,YAAYC,WAAW,SAAS6C,QAAQ,QAAQhC,MACtDC,MAAK,SAACC,GACL6B,EAAS7B,EAAcC,KAAKC,KAAI,SAACC,GAAD,oBAAY4B,GAAI5B,EAAI4B,IAAO5B,EAAIC,eAGnErB,IAASC,YAAYC,WAAW,SAAS6C,QAAQ,QAAQzB,YAAW,SAACL,GACnE6B,EAAS7B,EAAcC,KAAKC,KAAI,SAACC,GAAD,oBAAY4B,GAAI5B,EAAI4B,IAAO5B,EAAIC,iBAEhE,IAGD,qCACGwB,EAAM1B,KAAI,SAACK,GAAD,OACT,cAAC,EAAD,CACEjB,MAAK,iBAAYiB,EAAKjB,OACtBC,KAAI,gBAAWgB,EAAKhB,MACpBnB,OAAM,kBAAamC,EAAKnC,QACxBoB,KAAI,gBAAWe,EAAKf,MACpBC,MAAOc,EAAKwB,QAGhB,cAAC,EAAD,QCzCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.595705ac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport PropTypes from 'prop-types';\nimport './css/CommentInput.css';\n\nexport default function CommentInput({ postID }) {\n  const [comment, setComment] = useState({\n    postid: '',\n    text: '',\n    author: '',\n  });\n\n  function addToFirebase() {\n    firebase.firestore().collection('comments').add(comment);\n  }\n\n  return (\n    <div className=\"commentInputContainer\">\n      <div>Write a Comment</div>\n      <input placeholder=\"text\" onChange={(e) => setComment({ ...comment, text: e.target.value, postid: postID })} />\n      <input placeholder=\"author\" onChange={(e) => setComment({ ...comment, author: e.target.value, postid: postID })} />\n      <button\n        type=\"button\"\n        onClick={() => addToFirebase()}\n      >\n        Submit\n\n      </button>\n    </div>\n  );\n}\n\nCommentInput.defaultProps = {\n  postID: '',\n};\n\nCommentInput.propTypes = {\n  postID: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './css/Comment.css';\n\nexport default function Comment({\n  text, author,\n}) {\n  return (\n    <div>\n      <div className=\"body\">{text}</div>\n      <div>{author}</div>\n    </div>\n  );\n}\n\nComment.defaultProps = {\n  author: '',\n  text: '',\n};\n\nComment.propTypes = {\n  author: PropTypes.string,\n  text: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport './css/Post.css';\nimport CommentInput from './CommentInput';\nimport Comment from './Comment';\n\nexport default function Post({\n  title, body, author, date, docID,\n}) {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    firebase.firestore().collection('comments').where('postid', '==', { docID }).get()\n      .then((querySnapshot) => {\n        setComments(querySnapshot.docs.map((doc) => doc.data()));\n      });\n\n    firebase.firestore().collection('comments').onSnapshot((querySnapshot) => {\n      setComments(querySnapshot.docs.map((doc) => doc.data()));\n    });\n  }, []);\n\n  return (\n    <div className=\"postContainer\">\n      <div className=\"title\">{title}</div>\n      <div>{body}</div>\n      <div>{author}</div>\n      <div>{date}</div>\n\n      <CommentInput postID={docID} />\n      <div className=\"commentContainer\">\n        {comments.map((comment) => (\n          <Comment\n            author={`author: ${comment.author}`}\n            text={comment.text}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nPost.defaultProps = {\n  title: '',\n  body: '',\n  author: '',\n  date: '',\n  docID: '',\n};\n\nPost.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n  author: PropTypes.string,\n  date: PropTypes.string,\n  docID: PropTypes.string,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport firebase from 'firebase';\nimport './css/PostInput.css';\n\nexport default function PostInput() {\n  const [post, setPost] = useState({\n    title: '',\n    body: '',\n    author: '',\n    date: '',\n  });\n\n  // checks when asynchronous setPost function updates the value of date\n  const loaded = useRef(false);\n  useEffect(() => {\n    if (loaded.current) {\n      firebase.firestore().collection('posts').add(post);\n    } else {\n      loaded.current = true;\n    }\n  }, [post.date]);\n\n  function addDate() {\n    const currentDate = new Date().toLocaleDateString();\n    setPost(() => ({\n      ...post,\n      date: currentDate,\n    }));\n  }\n\n  return (\n    <div className=\"postInputContainer\">\n      <div>LEAVE A POST</div>\n      <input placeholder=\"title\" onChange={(e) => setPost({ ...post, title: e.target.value })} />\n      <input placeholder=\"body\" onChange={(e) => setPost({ ...post, body: e.target.value })} />\n      <input placeholder=\"author\" onChange={(e) => setPost({ ...post, author: e.target.value })} />\n      <button\n        type=\"button\"\n        onClick={() => addDate()}\n      >\n        Submit\n\n      </button>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport Post from './Post';\nimport PostInput from './PostInput';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    firebase.firestore().collection('posts').orderBy('date').get()\n      .then((querySnapshot) => {\n        setPosts(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\n      });\n\n    firebase.firestore().collection('posts').orderBy('date').onSnapshot((querySnapshot) => {\n      setPosts(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\n    });\n  }, []);\n\n  return (\n    <>\n      {posts.map((post) => (\n        <Post\n          title={`title: ${post.title}`}\n          body={`body: ${post.body}`}\n          author={`author: ${post.author}`}\n          date={`date: ${post.date}`}\n          docID={post.id}\n        />\n      ))}\n      <PostInput />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}